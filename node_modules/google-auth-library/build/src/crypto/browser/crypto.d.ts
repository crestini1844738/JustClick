<<<<<<< HEAD
=======
/**
 * Copyright 2019 Google LLC. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { CryptoSigner } from '../crypto';
>>>>>>> fbc465465586d391496fd3b7b9ffaa55ca6dbac2
import { Crypto, JwkCertificate } from '../crypto';
export declare class BrowserCrypto implements Crypto {
    constructor();
    sha256DigestBase64(str: string): Promise<string>;
    randomBytesBase64(count: number): string;
<<<<<<< HEAD
    private static padBase64;
    verify(pubkey: JwkCertificate, data: string, signature: string): Promise<boolean>;
    sign(privateKey: JwkCertificate, data: string): Promise<string>;
    decodeBase64StringUtf8(base64: string): string;
    encodeBase64StringUtf8(text: string): string;
    /**
     * Computes the SHA-256 hash of the provided string.
     * @param str The plain text string to hash.
     * @return A promise that resolves with the SHA-256 hash of the provided
     *   string in hexadecimal encoding.
     */
    sha256DigestHex(str: string): Promise<string>;
    /**
     * Computes the HMAC hash of a message using the provided crypto key and the
     * SHA-256 algorithm.
     * @param key The secret crypto key in utf-8 or ArrayBuffer format.
     * @param msg The plain text message.
     * @return A promise that resolves with the HMAC-SHA256 hash in ArrayBuffer
     *   format.
     */
    signWithHmacSha256(key: string | ArrayBuffer, msg: string): Promise<ArrayBuffer>;
=======
    verify(pubkey: JwkCertificate, data: string, signature: string): Promise<boolean>;
    createSign(algorithm: string): CryptoSigner;
    decodeBase64StringUtf8(base64: string): string;
    encodeBase64StringUtf8(text: string): string;
>>>>>>> fbc465465586d391496fd3b7b9ffaa55ca6dbac2
}
